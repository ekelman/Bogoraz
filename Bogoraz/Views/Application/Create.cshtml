@model Bogoraz.Models.Application

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Application</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.HomePhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.HomePhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HomePhone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CellPhone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CellPhone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CellPhone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SSN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SSN, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SSN, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DDLID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DDLID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DDLID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DDLIDState, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DDLIDState, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DDLIDState, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApplicationtDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApplicationtDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ApplicationtDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" id="btnSave" class="btn btn-default" />
                @Html.HiddenFor(model => model.DocumentName, new { id = "documentNameHidden" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <div id="signatureparent">
                    @*<div>jSignature inherits colors from parent element. Text = Pen color. Background = Background. (This works even when Flash-based Canvas emulation is used.)</div>*@
                    <div id="signature"></div>
                </div>
                @*<div id="tools"></div>
                <div>
                    <p>Display Area:</p>
                    <div id="displayarea"></div>
                </div>*@
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jsignature")
    <script>
        (function ($) {
            var topics = {};
            $.publish = function (topic, args) {
                if (topics[topic]) {
                    var currentTopic = topics[topic],
                    args = args || {};

                    for (var i = 0, j = currentTopic.length; i < j; i++) {
                        currentTopic[i].call($, args);
                    }
                }
            };
            $.subscribe = function (topic, callback) {
                if (!topics[topic]) {
                    topics[topic] = [];
                }
                topics[topic].push(callback);
                return {
                    "topic": topic,
                    "callback": callback
                };
            };
            $.unsubscribe = function (handle) {
                var topic = handle.topic;
                if (topics[topic]) {
                    var currentTopic = topics[topic];

                    for (var i = 0, j = currentTopic.length; i < j; i++) {
                        if (currentTopic[i] === handle.callback) {
                            currentTopic.splice(i, 1);
                        }
                    }
                }
            };
        })(jQuery);

        $(document).ready(function () {

            $("#btnSave").on("click", function () {
                var data = $sigdiv.jSignature('getData', 'image')
                if (typeof data === 'string') {
                    //$('textarea', $tools).val(data)
                } else if ($.isArray(data) && data.length === 2) {
                    //$('textarea', $tools).val(data.join(','))
                    $.publish(pubsubprefix + data[0], data);
                } else {
                    try {
                        //$('textarea', $tools).val(JSON.stringify(data))
                    } catch (ex) {
                        //$('textarea', $tools).val('Not sure how to stringify this, likely binary, format.')
                    }
                }
            });

            // This is the part where jSignature is initialized.
            var $sigdiv = $("#signature").jSignature({ 'UndoButton': true })

            // All the code below is just code driving the demo. 
            //, $tools = $('#tools')
            //, $extraarea = $('#displayarea')
            pubsubprefix = 'jSignature.demo.'

            //var export_plugins = $sigdiv.jSignature('listPlugins', 'export')
            //, chops = ['<span><b>Extract signature data as: </b></span><select>', '<option value="">(select export format)</option>']
            //, name
            //for (var i in export_plugins) {
            //    if (export_plugins.hasOwnProperty(i)) {
            //        name = export_plugins[i]
            //        chops.push('<option value="' + name + '">' + name + '</option>')
            //    }
            //}
            //chops.push('</select><span><b> or: </b></span>')

            //$(chops.join('')).bind('change', function (e) {
            //    if (e.target.value !== '') {
            //        var data = $sigdiv.jSignature('getData', e.target.value)
            //        $.publish(pubsubprefix + 'formatchanged')
            //        if (typeof data === 'string') {
            //            $('textarea', $tools).val(data)
            //        } else if ($.isArray(data) && data.length === 2) {
            //            $('textarea', $tools).val(data.join(','))
            //            $.publish(pubsubprefix + data[0], data);
            //        } else {
            //            try {
            //                $('textarea', $tools).val(JSON.stringify(data))
            //            } catch (ex) {
            //                $('textarea', $tools).val('Not sure how to stringify this, likely binary, format.')
            //            }
            //        }
            //    }
            //}).appendTo($tools)


            //$('<input type="button" value="Reset">').bind('click', function (e) {
            //    $sigdiv.jSignature('reset')
            //}).appendTo($tools)

            

            //$('<div><textarea style="width:100%;height:7em;"></textarea></div>').appendTo($tools)

            //$.subscribe(pubsubprefix + 'formatchanged', function () {
            //    $extraarea.html('')
            //})

            //$.subscribe(pubsubprefix + 'image/svg+xml', function (data) {

            //    try {
            //        var i = new Image()
            //        i.src = 'data:' + data[0] + ';base64,' + btoa(data[1])
            //        $(i).appendTo($extraarea)
            //    } catch (ex) {

            //    }

            //    var message = [
            //        "If you don't see an image immediately above, it means your browser is unable to display in-line (data-url-formatted) SVG."
            //        , "This is NOT an issue with jSignature, as we can export proper SVG document regardless of browser's ability to display it."
            //        , "Try this page in a modern browser to see the SVG on the page, or export data as plain SVG, save to disk as text file and view in any SVG-capabale viewer."
            //    ]
            //    $("<div>" + message.join("<br/>") + "</div>").appendTo($extraarea)
            //});

            //$.subscribe(pubsubprefix + 'image/svg+xml;base64', function (data) {
            //    var i = new Image()
            //    i.src = 'data:' + data[0] + ',' + data[1]
            //    $(i).appendTo($extraarea)

            //    var message = [
            //        "If you don't see an image immediately above, it means your browser is unable to display in-line (data-url-formatted) SVG."
            //        , "This is NOT an issue with jSignature, as we can export proper SVG document regardless of browser's ability to display it."
            //        , "Try this page in a modern browser to see the SVG on the page, or export data as plain SVG, save to disk as text file and view in any SVG-capabale viewer."
            //    ]
            //    $("<div>" + message.join("<br/>") + "</div>").appendTo($extraarea)
            //});

            $.subscribe(pubsubprefix + 'image/png;base64', function (data) {
                var i = new Image();
                i.height = 72;
                i.width = 284;
                i.src = 'data:' + data[0] + ',' + data[1];
                console.log('data:' + data[0] + ',' + data[1]);
                var imageData = 'data:' + data[0] + ',' + data[1];
                document.getElementById("documentNameHidden").value = imageData;
                //$('<span><b>As you can see, one of the problems of "image" extraction (besides not working on some old Androids, elsewhere) is that it extracts A LOT OF DATA and includes all the decoration that is not part of the signature.</b></span>').appendTo($extraarea)
                //$(i).appendTo($extraarea);
            });

            //$.subscribe(pubsubprefix + 'image/jsignature;base30', function (data) {
            //    $('<span><b>This is a vector format not natively render-able by browsers. Format is a compressed "movement coordinates arrays" structure tuned for use server-side. The bonus of this format is its tiny storage footprint and ease of deriving rendering instructions in programmatic, iterative manner.</b></span>').appendTo($extraarea)
            //});

            //if (Modernizr.touch) {
            //    $('#scrollgrabber').height($('#content').height())
            //}

        })

    </script>

}
